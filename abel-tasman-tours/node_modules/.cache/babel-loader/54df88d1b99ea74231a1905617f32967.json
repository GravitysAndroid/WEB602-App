{"ast":null,"code":"var _jsxFileName = \"C:\\\\Workspace\\\\Year2\\\\WEB\\\\Temp\\\\abel-tasman-tours\\\\src\\\\components\\\\Gallery\\\\Slider.js\";\n\n/** @jsx jsx */\nimport { useState } from 'react';\nimport { css, jsx } from '@emotion/core';\nimport SliderContent from './SliderContent';\nimport Slide from './Slide';\nimport Arrow from './Arrow';\nimport Dots from './Dots';\n/**\r\n * @function Slider\r\n */\n//Gets the width of the browser window, in order to resize\n\nconst Slider = props => {\n  const getWidth = () => window.innerWidth; //Gets the translate value, to move the images\n\n\n  const [state, setState] = useState({\n    activeIndex: 0,\n    translate: 0,\n    transition: 0.45\n  });\n  const {\n    translate,\n    transition,\n    activeIndex\n  } = state; //Takes the image to the next slide by using state\n  //Counts up from the current index in the array\n  //Once it counts past the last image it will set the array back to the starting position\n\n  const nextSlide = () => {\n    if (activeIndex === props.slides.length - 1) {\n      return setState({ ...state,\n        translate: 0,\n        activeIndex: 0\n      });\n    }\n\n    setState({ ...state,\n      activeIndex: activeIndex + 1,\n      translate: (activeIndex + 1) * getWidth()\n    });\n  }; //Takes the image to the previous slide by using state\n  //Counts down from the current index in the array\n  //Once it counts past the first image it will set the array back to the starting position\n\n\n  const prevSlide = () => {\n    if (activeIndex === 0) {\n      return setState({ ...state,\n        translate: (props.slides.length - 1) * getWidth(),\n        activeIndex: props.slides.length - 1\n      });\n    }\n\n    setState({ ...state,\n      activeIndex: activeIndex - 1,\n      translate: (activeIndex - 1) * getWidth()\n    });\n  }; //Three props to pass into slider content styling\n  //The props.slides.map calls the images to use on the slides, passes them into content\n  //The dots and arrows are outside of the slider content so they don't dissapear when the slide changes\n\n\n  return jsx(\"div\", {\n    css: SliderCSS,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, jsx(SliderContent, {\n    translate: translate,\n    transition: transition,\n    width: getWidth() * props.slides.length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, props.slides.map((slide, i) => jsx(Slide, {\n    key: slide + i,\n    content: slide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }))), jsx(Arrow, {\n    direction: \"left\",\n    handleClick: prevSlide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }), jsx(Arrow, {\n    direction: \"right\",\n    handleClick: nextSlide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }), jsx(Dots, {\n    slides: props.slides,\n    activeIndex: activeIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }));\n}; //Using inline styling using emotion; allows for styling in js\n\n\nconst SliderCSS = css`\n  position: relative;\n  height: 100vh;\n  width: 100vw;\n  margin: 0 auto;\n  overflow: hidden;\n`;\nexport default Slider;","map":{"version":3,"sources":["C:/Workspace/Year2/WEB/Temp/abel-tasman-tours/src/components/Gallery/Slider.js"],"names":["useState","css","jsx","SliderContent","Slide","Arrow","Dots","Slider","props","getWidth","window","innerWidth","state","setState","activeIndex","translate","transition","nextSlide","slides","length","prevSlide","SliderCSS","map","slide","i"],"mappings":"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","sourcesContent":["/** @jsx jsx */\r\nimport { useState } from 'react'\r\nimport { css, jsx } from '@emotion/core'\r\nimport SliderContent from './SliderContent'\r\nimport Slide from './Slide'\r\nimport Arrow from './Arrow'\r\nimport Dots from './Dots'\r\n\r\n/**\r\n * @function Slider\r\n */\r\n\r\n //Gets the width of the browser window, in order to resize\r\nconst Slider = (props) => {\r\n  const getWidth = () => window.innerWidth\r\n\r\n  //Gets the translate value, to move the images\r\n  const [state, setState] = useState({\r\n    activeIndex: 0,\r\n    translate: 0,\r\n    transition: 0.45\r\n  })\r\n\r\n  const { translate, transition, activeIndex } = state\r\n\r\n  //Takes the image to the next slide by using state\r\n  //Counts up from the current index in the array\r\n  //Once it counts past the last image it will set the array back to the starting position\r\n  const nextSlide = () => {\r\n    if (activeIndex === props.slides.length - 1) {\r\n      return setState({\r\n        ...state,\r\n        translate: 0,\r\n        activeIndex: 0\r\n      })\r\n    }\r\n\r\n    setState({\r\n      ...state,\r\n      activeIndex: activeIndex + 1,\r\n      translate: (activeIndex + 1) * getWidth()\r\n    })\r\n  }\r\n\r\n  //Takes the image to the previous slide by using state\r\n  //Counts down from the current index in the array\r\n  //Once it counts past the first image it will set the array back to the starting position\r\n  const prevSlide = () => {\r\n    if (activeIndex === 0) {\r\n      return setState({\r\n        ...state,\r\n        translate: (props.slides.length - 1) * getWidth(),\r\n        activeIndex: props.slides.length - 1\r\n      })\r\n    }\r\n\r\n    setState({\r\n      ...state,\r\n      activeIndex: activeIndex - 1,\r\n      translate: (activeIndex - 1) * getWidth()\r\n    })\r\n  }\r\n\r\n  //Three props to pass into slider content styling\r\n  //The props.slides.map calls the images to use on the slides, passes them into content\r\n  //The dots and arrows are outside of the slider content so they don't dissapear when the slide changes\r\n  return (\r\n    <div css={SliderCSS}>\r\n      <SliderContent\r\n        translate={translate}\r\n        transition={transition}\r\n        width={getWidth()* props.slides.length}\r\n      >\r\n        {\r\n          props.slides.map((slide, i) => \r\n          <Slide \r\n            key={slide + i} \r\n            content={slide}\r\n            />\r\n          )\r\n        }\r\n      </SliderContent>\r\n\r\n      <Arrow direction='left' handleClick={prevSlide}/>\r\n      <Arrow direction='right'handleClick={nextSlide}/>\r\n\r\n      <Dots slides={props.slides} activeIndex={activeIndex}/>\r\n    </div>\r\n  )\r\n}\r\n\r\n//Using inline styling using emotion; allows for styling in js\r\nconst SliderCSS = css`\r\n  position: relative;\r\n  height: 100vh;\r\n  width: 100vw;\r\n  margin: 0 auto;\r\n  overflow: hidden;\r\n`\r\nexport default Slider"]},"metadata":{},"sourceType":"module"}